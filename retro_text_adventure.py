# -*- coding: utf-8 -*-
"""retro_text_adventure.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qyvjBi3Prv0CFvcFN_hRDcIvT6HicHzc
"""

"""
Retro Text Adventure Game powered by MobileLLM

"""

import sys
from transformers import pipeline

model_identifier = "gpt2"

hf_token = None


generator = pipeline(
    "text-generation",
    model=model_identifier,
    token=hf_token,
    device=0
)

def generate_narrative(prompt):
    """
    Generates a narrative continuation using the language model.

    Args:
        prompt (str): The prompt that includes game state and player's action.

    Returns:
        str: The generated narrative continuation.
    """
    outputs = generator(
        prompt,
        max_length=200,
        truncation=True,  # Explicitly enable truncation
        do_sample=True,
        top_k=50,
        top_p=0.95,
        temperature=1.0
    )
    full_text = outputs[0]['generated_text']
    narrative = full_text[len(prompt):].strip()
    return narrative


def display_state(state):
    """
    Nicely displays the current game state.

    Args:
        state (dict): The current game state.
    """
    print("\nCurrent Game State:")
    print(f"  Location   : {state['location']}")
    print(f"  Description: {state['description']}")
    print(f"  Inventory  : {state['inventory']}")

def update_game_state(state, narrative):
    state['description'] = narrative

    return state

def main():
    # Introduction to the game.
    print("Welcome to the Retro Text Adventure Game!")
    print("Type 'quit' or 'exit' at any time to leave the game.\n")

    # Initialize the game state.
    state = {
        "location": "dungeon",
        "description": "You wake up in a mysterious dungeon with flickering torches and echoing footsteps.",
        "inventory": []
    }

    # Print the initial narrative.
    print(state["description"])

    # Main game loop.
    while True:

        user_input = input("\n>> What do you do? ").strip()
        if user_input.lower() in ['quit', 'exit']:
            print("Exiting game. Goodbye!")
            break

        # Create a detailed prompt that includes the current state and player's action.
        prompt = (
            f"Current game state:\n"
            f"Location: {state['location']}\n"
            f"Description: {state['description']}\n"
            f"Inventory: {state['inventory']}\n"
            f"Player's action: {user_input}\n"
            f"Generate a narrative in a retro text-adventure style that advances the story:\n"
        )

        # Generate narrative response from the language model.
        narrative = generate_narrative(prompt)

        # Print the AI-generated narrative.
        print("\n" + narrative)

        # Update the game state based on the narrative.
        state = update_game_state(state, narrative)

if __name__ == "__main__":
    main()